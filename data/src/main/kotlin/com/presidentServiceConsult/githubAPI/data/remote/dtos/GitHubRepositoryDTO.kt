package com.presidentServiceConsult.githubAPI.data.remote.dtos

import com.presidentServiceConsult.githubAPI.data.foundation.DTOMapper
import com.presidentServiceConsult.githubAPI.domain.models.GitHubData
import com.presidentServiceConsult.githubAPI.domain.models.GitHubRepositoryLicenseModel
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
data class GitHubRepositoryDTO(
    @SerialName("id")
    val id: Int,
    val nodeId: String,
    val name: String,
    val fullName: String,
    val owner: GitHubUserDTO,
    @SerialName("private")
    val isPrivate: Boolean,
    val htmlUrl: String? = null,
    val description: String? = null,
    val fork: Boolean,
    val url: String,
    val createdAt: String,
    val updatedAt: String,
    val pushedAt: String,
    val homepage: String? = null ?: "",
    val size: Int,
    val stargazersCount: Int,
    val watchersCount: Int,
    val language: String? = null,
    val forksCount: Int,
    val openIssuesCount: Int,
    val masterBranch: String? = null,
    val defaultBranch: String,
    val permissions: GitHubRepositoryPermissionsDTO,
    val score: Double,
    val archiveUrl: String,
    val assigneesUrl: String,
    val blobsUrl: String,
    val branchesUrl: String,
    val collaboratorsUrl: String,
    val commentsUrl: String,
    val commitsUrl: String,
    val compareUrl: String,
    val contentsUrl: String,
    val contributorsUrl: String,
    val deploymentsUrl: String,
    val downloadsUrl: String,
    val eventsUrl: String,
    val forksUrl: String,
    val gitCommitsUrl: String,
    val gitRefsUrl: String,
    val gitTagsUrl: String,
    val gitUrl: String,
    val issueCommentUrl: String,
    val issueEventsUrl: String,
    val issuesUrl: String,
    val keysUrl: String,
    val labelsUrl: String,
    val languagesUrl: String,
    val mergesUrl: String,
    val milestonesUrl: String,
    val notificationsUrl: String,
    val pullsUrl: String,
    val releasesUrl: String,
    val sshUrl: String,
    val stargazersUrl: String,
    val statusesUrl: String,
    val subscribersUrl: String,
    val subscriptionUrl: String,
    val tagsUrl: String,
    val teamsUrl: String,
    val treesUrl: String,
    val cloneUrl: String,
    val mirrorUrl: String? = null,
    val hooksUrl: String,
    val svnUrl: String,
    val forks: Int,
    val openIssues: Int,
    val watchers: Int,
    val hasIssues: Boolean,
    val hasProjects: Boolean,
    val hasPages: Boolean,
    val hasWiki: Boolean,
    val hasDownloads: Boolean,
    val archived: Boolean,
    val disabled: Boolean,
    val visibility: String,
    val license: GitHubRepositoryLicenseDTO? = null
) : DTOMapper<GitHubData.GitHubRepositoryModel> {
    override fun toDomain(): GitHubData.GitHubRepositoryModel {
        return GitHubData.GitHubRepositoryModel(
            id,
            nodeId,
            name,
            fullName,
            owner.toDomain(),
            isPrivate,
            htmlUrl ?: "",
            description ?: "",
            fork,
            url,
            createdAt,
            updatedAt,
            pushedAt,
            homepage ?: "",
            size,
            stargazersCount,
            watchersCount,
            language ?: "",
            forksCount,
            openIssuesCount,
            masterBranch ?: "",
            defaultBranch,
            permissions.toDomain(),
            score,
            archiveUrl,
            assigneesUrl,
            blobsUrl,
            branchesUrl,
            collaboratorsUrl,
            commentsUrl,
            commitsUrl,
            compareUrl,
            contentsUrl,
            contributorsUrl,
            deploymentsUrl,
            downloadsUrl,
            eventsUrl,
            forksUrl,
            gitCommitsUrl,
            gitRefsUrl,
            gitTagsUrl,
            gitUrl,
            issueCommentUrl,
            issueEventsUrl,
            issuesUrl,
            keysUrl,
            labelsUrl,
            languagesUrl,
            mergesUrl,
            milestonesUrl,
            notificationsUrl,
            pullsUrl,
            releasesUrl,
            sshUrl,
            stargazersUrl,
            statusesUrl,
            subscribersUrl,
            subscriptionUrl,
            tagsUrl,
            teamsUrl,
            treesUrl,
            cloneUrl,
            mirrorUrl ?: "",
            hooksUrl,
            svnUrl,
            forks,
            openIssues,
            watchers,
            hasIssues,
            hasProjects,
            hasPages,
            hasWiki,
            hasDownloads,
            archived,
            disabled,
            visibility,
            license?.toDomain() ?: GitHubRepositoryLicenseModel("", "", "", "", "", "")
        )
    }
}